package ch.idsia.crema.factor.symbolic.serialize;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;

import ch.idsia.crema.core.Domain;
import ch.idsia.crema.core.Strides;
import ch.idsia.crema.factor.symbolic.SymbolicFactor;
import ch.idsia.crema.model.Model;

public class NL implements SolverSerializer {

    private int variablesCounter;
    private HashMap<Strides, HashMap<Integer, String>> names;

    private int constraints;
    
    private String getName(Strides domain, int offset) {
        return names.get(domain).get(offset); 
    }

    public NP() {
    }


    @Override
    public String serialize(Model<? extends SymbolicFactor> model) {
        StringWriter buffer = new StringWriter();
        PrintWriter out = new PrintWriter(buffer);
        initVariableNames(model);
        writeHeader(out, model);
        
        out.flush();
        
        return buffer.toString();
    }


    private void writeHeader(PrintWriter out, Model<? extends SymbolicFactor> model) {
        out.println("g3 1 1 0 # generated by crema");
        
        out.print(" ");
        out.print(Integer.toString(variablesCounter));
        out.print(" ");
        out.print(Integer.toString(constraints));
        out.print(" 1 ");

    }

    private void initVariableNames(Model<? extends SymbolicFactor> model) {
        names = new HashMap<>();
        variablesCounter = 0;

        for (SymbolicFactor factor : model.getFactors()) {
            Strides domain = factor.getDomain();
            HashMap<Integer, String> name = new HashMap<>();
            for (int i = 0; i < domain.getCombinations(); ++i) {
                name.put(i, "v" + variablesCounter++);
            }
            names.put(domain, name);
        }
    }
    
}
